// Mocks generated by Mockito 5.4.6 from annotations
// in mission100/test/services/subscription_management_mock_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mission100/models/subscription_tier.dart' as _i7;
import 'package:mission100/services/subscription_cancellation_service.dart'
    as _i3;
import 'package:mission100/services/subscription_change_service.dart' as _i2;
import 'package:mission100/services/subscription_service.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSubscriptionChangeResult_0 extends _i1.SmartFake
    implements _i2.SubscriptionChangeResult {
  _FakeSubscriptionChangeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCancellationResult_1 extends _i1.SmartFake
    implements _i3.CancellationResult {
  _FakeCancellationResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SubscriptionChangeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionChangeService extends _i1.Mock
    implements _i2.SubscriptionChangeService {
  MockSubscriptionChangeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SubscriptionChangeResult> requestSubscriptionChange({
    required String? currentProductId,
    required String? newProductId,
    required bool? immediate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestSubscriptionChange,
          [],
          {
            #currentProductId: currentProductId,
            #newProductId: newProductId,
            #immediate: immediate,
          },
        ),
        returnValue: _i4.Future<_i2.SubscriptionChangeResult>.value(
            _FakeSubscriptionChangeResult_0(
          this,
          Invocation.method(
            #requestSubscriptionChange,
            [],
            {
              #currentProductId: currentProductId,
              #newProductId: newProductId,
              #immediate: immediate,
            },
          ),
        )),
      ) as _i4.Future<_i2.SubscriptionChangeResult>);

  @override
  _i4.Future<bool> canChangeSubscription(
    String? currentProductId,
    String? newProductId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #canChangeSubscription,
          [
            currentProductId,
            newProductId,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i2.SubscriptionChangeInfo>> getSubscriptionChangeHistory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubscriptionChangeHistory,
          [],
        ),
        returnValue: _i4.Future<List<_i2.SubscriptionChangeInfo>>.value(
            <_i2.SubscriptionChangeInfo>[]),
      ) as _i4.Future<List<_i2.SubscriptionChangeInfo>>);
}

/// A class which mocks [SubscriptionCancellationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionCancellationService extends _i1.Mock
    implements _i3.SubscriptionCancellationService {
  MockSubscriptionCancellationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.CancellationResult> requestCancellation({
    required String? productId,
    required _i3.CancellationType? type,
    required _i3.CancellationReason? reason,
    String? reasonText,
    bool? requestRefund = false,
    _i3.DataRetentionPolicy? dataRetention = _i3.DataRetentionPolicy.ninetyDays,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestCancellation,
          [],
          {
            #productId: productId,
            #type: type,
            #reason: reason,
            #reasonText: reasonText,
            #requestRefund: requestRefund,
            #dataRetention: dataRetention,
          },
        ),
        returnValue:
            _i4.Future<_i3.CancellationResult>.value(_FakeCancellationResult_1(
          this,
          Invocation.method(
            #requestCancellation,
            [],
            {
              #productId: productId,
              #type: type,
              #reason: reason,
              #reasonText: reasonText,
              #requestRefund: requestRefund,
              #dataRetention: dataRetention,
            },
          ),
        )),
      ) as _i4.Future<_i3.CancellationResult>);

  @override
  _i4.Future<bool> canCancelSubscription() => (super.noSuchMethod(
        Invocation.method(
          #canCancelSubscription,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i3.CancellationInfo>> getCancellationHistory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCancellationHistory,
          [],
        ),
        returnValue: _i4.Future<List<_i3.CancellationInfo>>.value(
            <_i3.CancellationInfo>[]),
      ) as _i4.Future<List<_i3.CancellationInfo>>);

  @override
  String getCancellationReasonText(_i3.CancellationReason? reason) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCancellationReasonText,
          [reason],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getCancellationReasonText,
            [reason],
          ),
        ),
      ) as String);
}

/// A class which mocks [SubscriptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionService extends _i1.Mock
    implements _i6.SubscriptionService {
  MockSubscriptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i6.SubscriptionType> get subscriptionStream =>
      (super.noSuchMethod(
        Invocation.getter(#subscriptionStream),
        returnValue: _i4.Stream<_i6.SubscriptionType>.empty(),
      ) as _i4.Stream<_i6.SubscriptionType>);

  @override
  _i6.SubscriptionType get currentSubscription => (super.noSuchMethod(
        Invocation.getter(#currentSubscription),
        returnValue: _i6.SubscriptionType.free,
      ) as _i6.SubscriptionType);

  @override
  bool get isPremium => (super.noSuchMethod(
        Invocation.getter(#isPremium),
        returnValue: false,
      ) as bool);

  @override
  bool get isExpired => (super.noSuchMethod(
        Invocation.getter(#isExpired),
        returnValue: false,
      ) as bool);

  @override
  bool get isAdFree => (super.noSuchMethod(
        Invocation.getter(#isAdFree),
        returnValue: false,
      ) as bool);

  @override
  _i7.SubscriptionTier getCurrentTier() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentTier,
          [],
        ),
        returnValue: _i7.SubscriptionTier.free,
      ) as _i7.SubscriptionTier);

  @override
  _i4.Future<void> setUserSignupDate(DateTime? signupDate) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserSignupDate,
          [signupDate],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> activateSubscription(String? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #activateSubscription,
          [productId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deactivateSubscription() => (super.noSuchMethod(
        Invocation.method(
          #deactivateSubscription,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  bool hasFeatureAccess(_i6.PremiumFeature? feature) => (super.noSuchMethod(
        Invocation.method(
          #hasFeatureAccess,
          [feature],
        ),
        returnValue: false,
      ) as bool);

  @override
  String getSubscriptionStatusText() => (super.noSuchMethod(
        Invocation.method(
          #getSubscriptionStatusText,
          [],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getSubscriptionStatusText,
            [],
          ),
        ),
      ) as String);

  @override
  String getSubscriptionDetailsText() => (super.noSuchMethod(
        Invocation.method(
          #getSubscriptionDetailsText,
          [],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getSubscriptionDetailsText,
            [],
          ),
        ),
      ) as String);

  @override
  bool shouldShowRenewalReminder() => (super.noSuchMethod(
        Invocation.method(
          #shouldShowRenewalReminder,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String> getSubscriptionBenefits() => (super.noSuchMethod(
        Invocation.method(
          #getSubscriptionBenefits,
          [],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool checkUsageLimit(
    _i6.UsageType? usageType,
    int? currentUsage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkUsageLimit,
          [
            usageType,
            currentUsage,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<_i6.UserSubscription?> getCurrentSubscription() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentSubscription,
          [],
        ),
        returnValue: _i4.Future<_i6.UserSubscription?>.value(),
      ) as _i4.Future<_i6.UserSubscription?>);

  @override
  _i4.Future<void> updateSubscriptionStatus(_i6.SubscriptionStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSubscriptionStatus,
          [status],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> preventAutoRenewal() => (super.noSuchMethod(
        Invocation.method(
          #preventAutoRenewal,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateSubscription({
    required String? productId,
    required dynamic purchaseDetails,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSubscription,
          [],
          {
            #productId: productId,
            #purchaseDetails: purchaseDetails,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
