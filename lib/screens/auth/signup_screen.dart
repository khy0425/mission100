import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../services/auth/auth_service.dart';
import '../../utils/constants.dart';
import '../misc/permission_screen.dart';

class SignUpScreen extends StatefulWidget {
  const SignUpScreen({super.key});

  @override
  State<SignUpScreen> createState() => _SignUpScreenState();
}

class _SignUpScreenState extends State<SignUpScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();
  bool _obscurePassword = true;
  bool _obscureConfirmPassword = true;
  bool _agreeTerms = false;
  bool _isLoading = false;

  @override
  void dispose() {
    _nameController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }

  Future<void> _handleSignUp() async {
    if (!_formKey.currentState!.validate()) return;

    if (!_agreeTerms) {
      _showErrorSnackBar('Ïù¥Ïö©ÏïΩÍ¥ÄÏóê ÎèôÏùòÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setState(() => _isLoading = true);

    final authService = Provider.of<AuthService>(context, listen: false);
    final result = await authService.signUpWithEmail(
      email: _emailController.text.trim(),
      password: _passwordController.text,
      displayName: _nameController.text.trim(),
    );

    setState(() => _isLoading = false);

    if (mounted) {
      if (result.success) {
        _showSuccessDialog();
      } else {
        _showErrorSnackBar(result.errorMessage!);
      }
    }
  }

  Future<void> _handleGoogleSignUp() async {
    setState(() => _isLoading = true);

    final authService = Provider.of<AuthService>(context, listen: false);
    final result = await authService.signInWithGoogle();

    setState(() => _isLoading = false);

    if (mounted) {
      if (result.success) {
        _showSuccessDialog();
      } else {
        _showErrorSnackBar(result.errorMessage!);
      }
    }
  }

  void _showSuccessDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.celebration, color: Colors.orange),
            SizedBox(width: 8),
            Text('ÌôòÏòÅÌï©ÎãàÎã§!'),
          ],
        ),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('üéâ Mission: 100Ïóê Í∞ÄÏûÖÌï¥Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§!'),
            SizedBox(height: 12),
            Text(
              'Îü∞Ïπ≠ Ïù¥Î≤§Ìä∏ ÌòúÌÉù:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            Text('‚Ä¢ 1Í∞úÏõî Î¨¥Î£å ÌîÑÎ¶¨ÎØ∏ÏóÑ Í∏∞Îä•'),
            Text('‚Ä¢ Ï†ÑÏ≤¥ 6Ï£º ÌîÑÎ°úÍ∑∏Îû® Ï†ëÍ∑º'),
            Text('‚Ä¢ Î™®Îì† Ï∞®Îìú ÏßÑÌôî Îã®Í≥Ñ'),
            Text('‚Ä¢ ÏÉÅÏÑ∏ ÌÜµÍ≥Ñ Î∞è Î∂ÑÏÑù'),
            SizedBox(height: 12),
            Text(
              'ÏßÄÍ∏à Î∞îÎ°ú Ïö¥ÎèôÏùÑ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî! üí™',
              style: TextStyle(
                color: Color(AppColors.primaryColor),
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        actions: [
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop(); // Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
              // ÌöåÏõêÍ∞ÄÏûÖ ÏôÑÎ£å ÌõÑ Í∂åÌïú ÏÑ§Ï†ï ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
              Navigator.of(context).pushReplacement(
                MaterialPageRoute(
                    builder: (context) => const PermissionScreen()),
              );
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(AppColors.primaryColor),
              foregroundColor: Colors.white,
            ),
            child: const Text('ÏãúÏûëÌïòÍ∏∞'),
          ),
        ],
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDark = theme.brightness == Brightness.dark;

    return Scaffold(
      backgroundColor: isDark ? Colors.black : const Color(0xFFF5F5F5),
      appBar: AppBar(
        backgroundColor:
            isDark ? Colors.grey[900] : const Color(AppColors.primaryColor),
        foregroundColor: Colors.white,
        elevation: 0,
        title: const Text(
          'ÌöåÏõêÍ∞ÄÏûÖ',
          style: TextStyle(
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // ÌôòÏòÅ Î©îÏãúÏßÄ
                const SizedBox(height: 20),
                Text(
                  'üéâ Îü∞Ïπ≠ Ïù¥Î≤§Ìä∏',
                  textAlign: TextAlign.center,
                  style: theme.textTheme.headlineSmall?.copyWith(
                    fontWeight: FontWeight.bold,
                    color: const Color(AppColors.primaryColor),
                  ),
                ),
                const SizedBox(height: 8),
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: const Color(AppColors.primaryColor)
                        .withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: const Color(AppColors.primaryColor)
                          .withValues(alpha: 0.3),
                    ),
                  ),
                  child: Column(
                    children: [
                      Text(
                        '1Í∞úÏõî Î¨¥Î£å ÌîÑÎ¶¨ÎØ∏ÏóÑ!',
                        style: theme.textTheme.titleLarge?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: const Color(AppColors.primaryColor),
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        'Ï†ÑÏ≤¥ 6Ï£º ÌîÑÎ°úÍ∑∏Îû® + Î™®Îì† Ï∞®Îìú + ÏÉÅÏÑ∏ ÌÜµÍ≥Ñ',
                        textAlign: TextAlign.center,
                        style: theme.textTheme.bodyMedium?.copyWith(
                          color: isDark ? Colors.white70 : Colors.black87,
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 32),

                // Ïù¥Î¶Ñ ÏûÖÎ†•
                TextFormField(
                  controller: _nameController,
                  enabled: !_isLoading,
                  decoration: InputDecoration(
                    labelText: 'Ïù¥Î¶Ñ',
                    prefixIcon: const Icon(Icons.person),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    filled: true,
                    fillColor: isDark ? Colors.grey[800] : Colors.white,
                  ),
                  validator: (value) {
                    if (value == null || value.trim().isEmpty) {
                      return 'Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
                    }
                    if (value.trim().length < 2) {
                      return 'Ïù¥Î¶ÑÏùÄ 2Í∏ÄÏûê Ïù¥ÏÉÅ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),

                // Ïù¥Î©îÏùº ÏûÖÎ†•
                TextFormField(
                  controller: _emailController,
                  keyboardType: TextInputType.emailAddress,
                  enabled: !_isLoading,
                  decoration: InputDecoration(
                    labelText: 'Ïù¥Î©îÏùº',
                    prefixIcon: const Icon(Icons.email),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    filled: true,
                    fillColor: isDark ? Colors.grey[800] : Colors.white,
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Ïù¥Î©îÏùºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
                    }
                    if (!RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(value)) {
                      return 'Ïò¨Î∞îÎ•∏ Ïù¥Î©îÏùº ÌòïÏãùÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),

                // ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†•
                TextFormField(
                  controller: _passwordController,
                  obscureText: _obscurePassword,
                  enabled: !_isLoading,
                  decoration: InputDecoration(
                    labelText: 'ÎπÑÎ∞ÄÎ≤àÌò∏',
                    prefixIcon: const Icon(Icons.lock),
                    suffixIcon: IconButton(
                      icon: Icon(
                        _obscurePassword
                            ? Icons.visibility
                            : Icons.visibility_off,
                      ),
                      onPressed: () {
                        setState(() => _obscurePassword = !_obscurePassword);
                      },
                    ),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    filled: true,
                    fillColor: isDark ? Colors.grey[800] : Colors.white,
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
                    }
                    if (value.length < 6) {
                      return 'ÎπÑÎ∞ÄÎ≤àÌò∏Îäî 6Í∏ÄÏûê Ïù¥ÏÉÅ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),

                // ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏
                TextFormField(
                  controller: _confirmPasswordController,
                  obscureText: _obscureConfirmPassword,
                  enabled: !_isLoading,
                  decoration: InputDecoration(
                    labelText: 'ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏',
                    prefixIcon: const Icon(Icons.lock_outline),
                    suffixIcon: IconButton(
                      icon: Icon(
                        _obscureConfirmPassword
                            ? Icons.visibility
                            : Icons.visibility_off,
                      ),
                      onPressed: () {
                        setState(() =>
                            _obscureConfirmPassword = !_obscureConfirmPassword);
                      },
                    ),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    filled: true,
                    fillColor: isDark ? Colors.grey[800] : Colors.white,
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Îã§Ïãú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
                    }
                    if (value != _passwordController.text) {
                      return 'ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 24),

                // Ïù¥Ïö©ÏïΩÍ¥Ä ÎèôÏùò
                Row(
                  children: [
                    Checkbox(
                      value: _agreeTerms,
                      onChanged: _isLoading
                          ? null
                          : (value) {
                              setState(() => _agreeTerms = value ?? false);
                            },
                      activeColor: const Color(AppColors.primaryColor),
                    ),
                    Expanded(
                      child: GestureDetector(
                        onTap: _isLoading
                            ? null
                            : () {
                                setState(() => _agreeTerms = !_agreeTerms);
                              },
                        child: RichText(
                          text: TextSpan(
                            style: theme.textTheme.bodyMedium?.copyWith(
                              color: isDark ? Colors.white70 : Colors.black87,
                            ),
                            children: const [
                              TextSpan(text: ''),
                              TextSpan(
                                text: 'Ïù¥Ïö©ÏïΩÍ¥Ä',
                                style: TextStyle(
                                  color: Color(AppColors.primaryColor),
                                  decoration: TextDecoration.underline,
                                ),
                              ),
                              TextSpan(text: ' Î∞è '),
                              TextSpan(
                                text: 'Í∞úÏù∏Ï†ïÎ≥¥Ï≤òÎ¶¨Î∞©Ïπ®',
                                style: TextStyle(
                                  color: Color(AppColors.primaryColor),
                                  decoration: TextDecoration.underline,
                                ),
                              ),
                              TextSpan(text: 'Ïóê ÎèôÏùòÌï©ÎãàÎã§.'),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 24),

                // ÌöåÏõêÍ∞ÄÏûÖ Î≤ÑÌäº
                ElevatedButton(
                  onPressed: _isLoading ? null : _handleSignUp,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(AppColors.primaryColor),
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  child: _isLoading
                      ? const SizedBox(
                          height: 20,
                          width: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor:
                                AlwaysStoppedAnimation<Color>(Colors.white),
                          ),
                        )
                      : const Text(
                          'ÌöåÏõêÍ∞ÄÏûÖÌïòÍ≥† 1Í∞úÏõî Î¨¥Î£å ÏãúÏûë!',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                ),
                const SizedBox(height: 16),

                // Íµ¨Î∂ÑÏÑ†
                Row(
                  children: [
                    Expanded(child: Divider(color: Colors.grey[400])),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: Text(
                        'ÎòêÎäî',
                        style: TextStyle(color: Colors.grey[600]),
                      ),
                    ),
                    Expanded(child: Divider(color: Colors.grey[400])),
                  ],
                ),
                const SizedBox(height: 16),

                // Google ÌöåÏõêÍ∞ÄÏûÖ Î≤ÑÌäº
                ElevatedButton.icon(
                  onPressed: _isLoading ? null : _handleGoogleSignUp,
                  icon: Image.asset(
                    'assets/icons/google_icon.png',
                    height: 20,
                    width: 20,
                    errorBuilder: (context, error, stackTrace) {
                      return const Icon(Icons.account_circle, size: 20);
                    },
                  ),
                  label: const Text('GoogleÎ°ú Îπ†Î•∏ Í∞ÄÏûÖ'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.white,
                    foregroundColor: Colors.black87,
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                      side: BorderSide(color: Colors.grey[300]!),
                    ),
                  ),
                ),
                const SizedBox(height: 24),

                // Î°úÍ∑∏Ïù∏ ÎßÅÌÅ¨
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      'Ïù¥ÎØ∏ Í≥ÑÏ†ïÏù¥ ÏûàÏúºÏã†Í∞ÄÏöî? ',
                      style: TextStyle(color: Colors.grey[600]),
                    ),
                    TextButton(
                      onPressed: _isLoading
                          ? null
                          : () {
                              Navigator.of(context).pop();
                            },
                      child: const Text(
                        'Î°úÍ∑∏Ïù∏',
                        style: TextStyle(
                          color: Color(AppColors.primaryColor),
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
